// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Visagiste.Infrastructure.Repository;

#nullable disable

namespace Visagiste.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220107183558_DataSeeding")]
    partial class DataSeeding
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.0");

            modelBuilder.Entity("Visagiste.Models.Avatar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<int>("X")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Y")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId")
                        .IsUnique();

                    b.ToTable("Avatar");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OwnerId = 1,
                            Url = "/images/author.jpg",
                            X = 0,
                            Y = 0
                        });
                });

            modelBuilder.Entity("Visagiste.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("InstagramUrl")
                        .HasColumnType("TEXT");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("VkUrl")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId")
                        .IsUnique();

                    b.ToTable("Contact");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "203 Fake St. Mountain View, San Francisco, California, USA",
                            Email = "info@yourdomain.com",
                            InstagramUrl = "https://www.instagram.com/",
                            OwnerId = 1,
                            Phone = "+2 392 3929 210",
                            VkUrl = "https://vk.com/"
                        });
                });

            modelBuilder.Entity("Visagiste.Models.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AboutMe")
                        .HasColumnType("TEXT");

                    b.Property<string>("Banners")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Owners");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AboutMe = "I am A Photographer from America Far far away, behind the word mountains, far from the countries Vokalia and Consonantia, there live the blind texts. Separated they live in Bookmarksgrove right at the coast of the Semantics, a large language ocean.",
                            Banners = "[\"/images/author.jpg\",\"/images/author-2.jpg\"]",
                            Name = "Ivan Ivanov"
                        });
                });

            modelBuilder.Entity("Visagiste.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Photos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FullName = "/images/image_1.jpg",
                            Tags = "[\"Model\",\"Visagiste\"]"
                        },
                        new
                        {
                            Id = 2,
                            FullName = "/images/image_2.jpg",
                            Tags = "[\"Model\"]"
                        },
                        new
                        {
                            Id = 3,
                            FullName = "/images/image_3.jpg",
                            Tags = "[\"Model\"]"
                        },
                        new
                        {
                            Id = 4,
                            FullName = "/images/image_4.jpg",
                            Tags = "[\"Model\"]"
                        },
                        new
                        {
                            Id = 5,
                            FullName = "/images/image_5.jpg",
                            Tags = "[\"Model\"]"
                        },
                        new
                        {
                            Id = 6,
                            FullName = "/images/image_6.jpg",
                            Tags = "[\"Model\"]"
                        },
                        new
                        {
                            Id = 7,
                            FullName = "/images/image_7.jpg",
                            Tags = "[\"Model\"]"
                        },
                        new
                        {
                            Id = 8,
                            FullName = "/images/image_8.jpg",
                            Tags = "[\"Model\"]"
                        },
                        new
                        {
                            Id = 9,
                            FullName = "/images/image_9.jpg",
                            Tags = "[\"Model\"]"
                        },
                        new
                        {
                            Id = 10,
                            FullName = "/images/image_10.jpg",
                            Tags = "[\"Model\"]"
                        },
                        new
                        {
                            Id = 11,
                            FullName = "/images/image_11.jpg",
                            Tags = "[\"Model\"]"
                        },
                        new
                        {
                            Id = 12,
                            FullName = "/images/image_12.jpg",
                            Tags = "[\"Model\"]"
                        });
                });

            modelBuilder.Entity("Visagiste.Models.Avatar", b =>
                {
                    b.HasOne("Visagiste.Models.Owner", null)
                        .WithOne("Avatar")
                        .HasForeignKey("Visagiste.Models.Avatar", "OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Visagiste.Models.Contact", b =>
                {
                    b.HasOne("Visagiste.Models.Owner", null)
                        .WithOne("Contact")
                        .HasForeignKey("Visagiste.Models.Contact", "OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Visagiste.Models.Owner", b =>
                {
                    b.Navigation("Avatar");

                    b.Navigation("Contact");
                });
#pragma warning restore 612, 618
        }
    }
}
